# Generated by Django 4.1.3 on 2022-11-20 03:49

from django.db import migrations, models
from django.utils.termcolors import colorize
import hashlib
from django.conf import settings
import os


class DocumentModelModel(object):
    """
    Django's migrations restrict access to model methods, so this is a snapshot
    of the methods that existed at the time this migration was written, since
    we need to make use of a lot of these shortcuts here.
    """

    def __init__(self, doc):
        self.pk = doc.pk
        self.filename = doc.filename
        self.correspondent = doc.correspondent
        self.title = doc.title
        self.file_type = doc.file_type
        self.tags = doc.tags
        self.created = doc.created

    @property
    def source_path(self) -> str:
        if self.filename:
            fname = str(self.filename)
        else:
            fname = f"{self.pk:07}{self.file_type}"
            if self.storage_type == self.STORAGE_TYPE_GPG:
                fname += ".gpg"  # pragma: no cover

        return os.path.join(settings.ORIGINALS_DIR, fname)

    @property
    def source_file(self):
        return open(self.source_path, "rb")

    @property
    def archive_path(self):
        if self.has_archive_version:
            return os.path.join(settings.ARCHIVE_DIR, str(self.archive_filename))
        else:
            return None

    @property
    def archive_file(self):
        return open(self.archive_path, "rb")


def _migrate_to_sha3(apps, schema_editor):
    document_model = apps.get_model("documents", "Document")

    if not document_model.objects.all().exists():
        return

    print(
        colorize(
            "\n\n"
            "  This is a one-time only migration to generate checksums for all\n"
            "  of your existing documents.  If you have a lot of documents\n"
            "  though, this may take a while, so a coffee break may be in\n"
            "  order."
            "\n",
            opts=("bold",),
        )
    )

    for d in document_model.objects.all():
        doc_model = DocumentModelModel(d)

        source_path = doc_model.source_path
        archive_path = doc_model.archive_file

        checksum = None

        if os.path.isfile(source_path):
            checksum = hashlib.sha3_256(doc_model.source_file.read()).hexdigest()

        archive_checksum = None
        if archive_path is not None and os.path.isfile(archive_path):
            archive_checksum = hashlib.sha3_256(doc_model.archive_file.read()).hexdigest

        document_model.objects.filter(pk=doc_model.pk).update(
            checksum=checksum, archive_checksum=archive_checksum
        )


class Migration(migrations.Migration):

    dependencies = [
        ("documents", "1027_remove_paperlesstask_attempted_task_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="document",
            name="archive_checksum",
            field=models.CharField(
                blank=True,
                editable=False,
                help_text="The checksum of the archived document.",
                max_length=64,
                null=True,
                verbose_name="archive checksum",
            ),
        ),
        migrations.AlterField(
            model_name="document",
            name="checksum",
            field=models.CharField(
                editable=False,
                help_text="The checksum of the original document.",
                max_length=64,
                unique=True,
                verbose_name="checksum",
            ),
        ),
        migrations.RunPython(_migrate_to_sha3, migrations.RunPython.noop),
    ]
